# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "trusty64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  config.vm.provider "virtualbox" do |v|
    v.customize ["modifyvm", :id, "--memory", "2048"]
    v.customize ["modifyvm", :id, "--cpus", "2"]
  end

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  # config.vm.network :hostonly, "192.168.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.

  config.vm.network :forwarded_port, guest: 3000, host: 3000 # development server
  config.vm.network :forwarded_port, guest: 5432, host: 5432 # postgresql
  config.vm.network :forwarded_port, guest: 1080, host: 1080 # mailcatcher
  config.vm.network :forwarded_port, guest: 1025, host: 1025 # mailcatcher


  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"

  # enable berkshelf for recipe management
  # config.berkshelf.enabled = true

  # enable omnibus to manage latest chef version
  # config.omnibus.chef_version = '11.6.2'

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  # VAGRANT_JSON = JSON.load(Pathname(__FILE__).dirname.join('.', 'chef', 'node.json').read)
  # config.vm.provision :chef_solo do |chef|
  #   chef.roles_path     = "chef/roles"
  #   chef.data_bags_path = "chef/data_bags"
  #   chef.cookbooks_path = "chef/cookbooks"
  #   chef.log_level      = :debug

  #   # Cookbooks that require additional configuration go into
  #   # node.json and are loaded here
  #   chef.json           = VAGRANT_JSON
  #   VAGRANT_JSON.fetch('run_list', []).each do |recipe|
  #     chef.add_recipe(recipe)
  #   end
  # end

  # config.vm.provision :shell, path: 'bin/vm_rails_setup'
  #

  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "provisioning/rails_developer.yml"
  end

end
